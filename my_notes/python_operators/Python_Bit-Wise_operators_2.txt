            PYTHON BIT-WISE OPERATORS

        Bit-Wise NOT ~

The bit-wise NOT operator is also known as the inverter.
It is used to invert the bits.

X becomes -(x +1)
~ 7 = -8

        >>> ~7
        -8
        >>> ~8
        -9
        >>> 

        Bit-wise Left Shift <<

Returns x with the bits shifted to the left by y places.

So basically what thatmeans, if you have a value of x, you hav the base shifted to the left by the value I will supply to the value of Y.
So what that means is that the Y places will add zeros to the shifted places.

The Y places adds zeros.

3 << 2
What that does basically is to add two zeros to the left of the binary value of three.

11 + 00 => 1100 => 12
The binary value of three is eleven.
So what that shift does is going to add two zeros to the left of the binary value of three, which is eleven.

>>> 3<< 2
12
>>> 


            Bit-wise Right Shift >> (operator)

Returns x with the bits shifted to the right by y places.
    # So the Y places actually delete the bits specified.
>>> 3 >> 1
1
>>>

3 >> 1
    What that does, it woul take away one of the bits from the binary number three.

11 - 1 => 1 => 1
    So if I take away one from 11 or one one, it becomes one.


            Bit-wise Operators 

Operator      Name 
&           And
|           Or
^           XOR
~           Not
<<          Left shift
>>          Right shift

